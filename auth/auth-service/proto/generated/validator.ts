// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: validator.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "";

export interface TokenRequest {
  token: string;
}

export interface TokenResponse {
  valid: boolean;
  userId: string;
  tenantId: string;
}

function createBaseTokenRequest(): TokenRequest {
  return { token: "" };
}

export const TokenRequest: MessageFns<TokenRequest> = {
  encode(message: TokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenRequest {
    return { token: isSet(object.token) ? globalThis.String(object.token) : "" };
  },

  toJSON(message: TokenRequest): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create(base?: DeepPartial<TokenRequest>): TokenRequest {
    return TokenRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TokenRequest>): TokenRequest {
    const message = createBaseTokenRequest();
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseTokenResponse(): TokenResponse {
  return { valid: false, userId: "", tenantId: "" };
}

export const TokenResponse: MessageFns<TokenResponse> = {
  encode(message: TokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.valid !== false) {
      writer.uint32(8).bool(message.valid);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.tenantId !== "") {
      writer.uint32(26).string(message.tenantId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.valid = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tenantId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenResponse {
    return {
      valid: isSet(object.valid) ? globalThis.Boolean(object.valid) : false,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      tenantId: isSet(object.tenantId) ? globalThis.String(object.tenantId) : "",
    };
  },

  toJSON(message: TokenResponse): unknown {
    const obj: any = {};
    if (message.valid !== false) {
      obj.valid = message.valid;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.tenantId !== "") {
      obj.tenantId = message.tenantId;
    }
    return obj;
  },

  create(base?: DeepPartial<TokenResponse>): TokenResponse {
    return TokenResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TokenResponse>): TokenResponse {
    const message = createBaseTokenResponse();
    message.valid = object.valid ?? false;
    message.userId = object.userId ?? "";
    message.tenantId = object.tenantId ?? "";
    return message;
  },
};

export type AuthValidatorService = typeof AuthValidatorService;
export const AuthValidatorService = {
  validate: {
    path: "/AuthValidator/Validate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TokenRequest): Buffer => Buffer.from(TokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): TokenRequest => TokenRequest.decode(value),
    responseSerialize: (value: TokenResponse): Buffer => Buffer.from(TokenResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): TokenResponse => TokenResponse.decode(value),
  },
} as const;

export interface AuthValidatorServer extends UntypedServiceImplementation {
  validate: handleUnaryCall<TokenRequest, TokenResponse>;
}

export interface AuthValidatorClient extends Client {
  validate(
    request: TokenRequest,
    callback: (error: ServiceError | null, response: TokenResponse) => void,
  ): ClientUnaryCall;
  validate(
    request: TokenRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TokenResponse) => void,
  ): ClientUnaryCall;
  validate(
    request: TokenRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TokenResponse) => void,
  ): ClientUnaryCall;
}

export const AuthValidatorClient = makeGenericClientConstructor(AuthValidatorService, "AuthValidator") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AuthValidatorClient;
  service: typeof AuthValidatorService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
